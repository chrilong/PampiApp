{"engineId":"17ba8657-f2fe-4050-8b54-d595af373bea","engineName":"CDAOI PAMPI_Unmastered","rdbmsId":"67d134f2-211a-4ebd-8768-e5601f04349a","varstore":{"cbv_1557433743057":{"pixelType":"QUERY_STRUCT","class":"prerna.query.querystruct.SelectQueryStruct","value":[{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":-1,"offset":-1,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.util.Vector","value":[[2,3,4]],"opType":["OPERATION"]}}]}],"opType":["OPERATION"]},"cbv_1557433856937":{"pixelType":"QUERY_STRUCT","class":"prerna.query.querystruct.SelectQueryStruct","value":[{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":-1,"offset":-1,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.lang.Integer","value":[1],"opType":["OPERATION"]}}]}],"opType":["OPERATION"]},"GRID_NAME":{"pixelType":"CONST_STRING","class":"java.lang.String","value":["PROFILE_FRAME"],"opType":["OPERATION"]}},"frames":[{"file":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\PROFILE_FRAME.rda","meta":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\METADATA__PROFILE_FRAME.owl","state":null,"type":"prerna.ds.r.RDataTable","name":"PROFILE_FRAME","keys":["PROFILE_FRAME2"]},{"file":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\SimFrameaaQ541.rda","meta":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\METADATA__SimFrameaaQ541.owl","state":null,"type":"prerna.ds.r.RDataTable","name":"SimFrameaaQ541","keys":["SimFrame"]},{"file":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\PROFILE_FRAME.gz","meta":"@BaseFolder@\\db\\@ENGINE@\\version\\67d134f2-211a-4ebd-8768-e5601f04349a\\METADATA__PROFILE_FRAME.owl","state":null,"type":"prerna.ds.h2.H2Frame","name":"PROFILE_FRAME","keys":["PROFILE_FRAME"]}],"panels":[{"panelId":"0","panelLabel":"General Data Messiness","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{"tools":{"shared":{"colorName":"Nine","backgroundColor":"#FFFFFF","color":{},"showAdjacent":true}}},"events":{},"comments":{},"position":{"top":0,"left":0,"width":29.644495412844034,"height":36.803874092009686},"filters":[],"order":[],"cbv":[]},{"panelId":"1","panelLabel":"Semantic Column Similarity","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{"tools":{"shared":{"heatmapColor":["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529","#00331f"]}}},"events":{"onSingleClick":{"Unfilter":[{"disabledVisuals":["Grid","Sunburst"],"default":true,"query":"UnfilterFrame(column_name);","options":{},"refresh":false,"disabled":false,"panel":""}]},"onDoubleClick":{"Filter":[{"default":true,"query":"AddFrameFilter(column_name==<SelectedValues>);","options":{},"refresh":false,"disabled":false,"panel":"0"}]}},"comments":{},"position":{"top":37.04600484261501,"left":0,"width":29.52981651376147,"height":62.95399515738499},"filters":[],"order":[],"cbv":[]},{"panelId":"2","panelLabel":"Columns in Multiple Tables","view":"text-widget","viewOptions":"{\"html\":\"<div ng-repeat=\\\"columnData in FrameData[0].output.data.values \\\" style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>{{columnData[0] | replaceUnderscores}}</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<ol>\\n<li><span> Frequency: </span><p class = \\\"ColumnDetails\\\">{{columnData[1] | replaceUnderscores}}</p></li>\\n<li><span> Tables: </span><p class = \\\"ColumnDetails\\\"> </p></li>\\n<br>\\n<div ng-repeat=\\\"tableData in FrameData2[0].output.data.values\\\" ng-if='columnData[0] == tableData[0]' style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<ul >\\n<li><p class = \\\"Tables\\\"> {{tableData[1] | replaceUnderscores}} </p></li>\\n</ul>\\n</div>\\n</ol>\\n<br>\\n</div>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget ol{\\n  color: #000000;\\n  list-style-type: none;\\n}\\n#TextWidget ol li{\\n  position: relative;\\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\\n  margin-bottom: 20px;\\n}\\n#TextWidget li p.ColumnDetails{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 110px;\\n  color: #000000;\\n}\\n#TextWidget li p.Tables{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 5px;\\n  color: #000000;\\n}\\n#TextWidget ul > li{margin-left:90px;\\n} \\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"FrameData\",\"query\":\"Frame( frame = [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name != [\\\"PRIM_KEY_PLACEHOLDER\\\"]) | Sort ( columns = [CountOfcolumn_name], sort = [\\\"desc\\\"]) | Iterate() | Collect(500);\"},{\"name\":\"FrameData2\",\"query\":\"Frame( frame = [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);\"}],\"freeze\":false,\"loading\":true}","viewOptionsMap":{"text-widget":{"html":"<div ng-repeat=\"columnData in FrameData[0].output.data.values \" style=\"word-wrap: break-word; margin-right: 25px\">\n<div class = \"header\"> <font size = \"5\" color = \"white\"><b>{{columnData[0] | replaceUnderscores}}</b></font></div>\n<div id=\"colorstrip\"></div>\n<ol>\n<li><span> Frequency: </span><p class = \"ColumnDetails\">{{columnData[1] | replaceUnderscores}}</p></li>\n<li><span> Tables: </span><p class = \"ColumnDetails\"> </p></li>\n<br>\n<div ng-repeat=\"tableData in FrameData2[0].output.data.values\" ng-if='columnData[0] == tableData[0]' style=\"word-wrap: break-word; margin-right: 25px\">\n<ul >\n<li><p class = \"Tables\"> {{tableData[1] | replaceUnderscores}} </p></li>\n</ul>\n</div>\n</ol>\n<br>\n</div>\n\n<style>\n\n#TextWidget #colorstrip{\n    width: 100%; height: 2px;\n    border-style: solid;\n    border-color: #86BC24;\n    background-color: #86BC24;\n}\n#TextWidget .header{\nbackground-color: #000000;\n}\n#TextWidget ol{\n  color: #000000;\n  list-style-type: none;\n}\n#TextWidget ol li{\n  position: relative;\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\n  margin-bottom: 20px;\n}\n#TextWidget li p.ColumnDetails{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 110px;\n  color: #000000;\n}\n#TextWidget li p.Tables{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 5px;\n  color: #000000;\n}\n#TextWidget ul > li{margin-left:90px;\n} \n\n#TextWidget span{\n  position: absolute;\n}\n</style>","varList":[{"name":"FrameData","query":"Frame( frame = [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name != [\"PRIM_KEY_PLACEHOLDER\"]) | Sort ( columns = [CountOfcolumn_name], sort = [\"desc\"]) | Iterate() | Collect(500);"},{"name":"FrameData2","query":"Frame( frame = [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);"}],"freeze":false,"loading":true}},"config":{},"ornaments":{},"events":{},"comments":{},"position":{"top":0,"left":76.08944954128441,"width":23.56651376146789,"height":100},"filters":[],"order":[],"cbv":[]},{"panelId":"3","panelLabel":"Finding Duplicate Entities in a Table","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{},"events":{"onSingleClick":{"Unfilter":[{"disabledVisuals":["Grid","Sunburst"],"default":true,"query":"UnfilterFrame(<SelectedColumn>);","options":{},"refresh":false,"disabled":false,"panel":""}]},"onBrush":{"Filter":[{"default":true,"query":"if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));","options":{},"refresh":false,"disabled":false,"panel":""}]}},"comments":{},"position":{"top":60.41162227602905,"left":29.701834862385322,"width":46.215596330275226,"height":39.58837772397095},"filters":[],"order":[],"cbv":[{"name":"cbv_1557433743057","options":{"color":"#86BC24","colorOn":"SSN","valuesColumn":"Count_of_PATIENTS"},"qs":{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":-1,"offset":-1,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.util.Vector","value":[[2,3,4]],"opType":["OPERATION"]}}]}},{"name":"cbv_1557433856937","options":{"color":"#000000","colorOn":"SSN","valuesColumn":"Count_of_PATIENTS"},"qs":{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":-1,"offset":-1,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.lang.Integer","value":[1],"opType":["OPERATION"]}}]}}]},{"panelId":"4","panelLabel":"_","view":"text-widget","viewOptions":"{\"html\":\"<body>\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>Data MetaModel</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<div class = \\\"listItem\\\">As you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother</font></div>\\n<img src=\\\"http://drive.google.com/uc?export=view&id=1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\\\" alt=\\\"PAMPI Metamodel\\\" width=\\\"1000\\\" height=\\\"666\\\">\\n</body>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget .listItem{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 20px;\\n  padding-top: 5px;\\n  padding-bottom: 10 px;\\n  color: #000000;\\n}\\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"\",\"query\":\"\"}],\"freeze\":false,\"loading\":true}","viewOptionsMap":{"text-widget":{"html":"<body>\n<div class = \"header\"> <font size = \"5\" color = \"white\"><b>Data MetaModel</b></font></div>\n<div id=\"colorstrip\"></div>\n<div class = \"listItem\">As you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother</font></div>\n<img src=\"http://drive.google.com/uc?export=view&id=1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\" alt=\"PAMPI Metamodel\" width=\"1000\" height=\"666\">\n</body>\n\n<style>\n\n#TextWidget #colorstrip{\n    width: 100%; height: 2px;\n    border-style: solid;\n    border-color: #86BC24;\n    background-color: #86BC24;\n}\n#TextWidget .header{\nbackground-color: #000000;\n}\n#TextWidget .listItem{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 20px;\n  padding-top: 5px;\n  padding-bottom: 10 px;\n  color: #000000;\n}\n\n#TextWidget span{\n  position: absolute;\n}\n</style>","varList":[{"name":"","query":""}],"freeze":false,"loading":true}},"config":{},"ornaments":{},"events":{},"comments":{},"position":{"top":0,"left":29.759174311926607,"width":46.10091743119266,"height":60.048426150121074},"filters":[],"order":[],"cbv":[]}],"tasks":{"tasks":[{"type":"basic","task":{"taskType":"basic","id":"task1","numCollected":2000,"internalOffset":0,"taskOptions":"{\"options\":{\"0\":{\"layout\":\"Graph\",\"alignment\":{\"start\":[\"table_name\"],\"end\":[\"column_name\"],\"facet\":[]}}},\"ornament\":false}","qs":{"qsType":"FRAME","frameName":"PROFILE_FRAME","isDistinct":true,"overrideImplicit":false,"limit":2000,"offset":0,"relations":"[]","selectors":[{"type":"COLUMN","content":{"table":"table_name","column":"PRIM_KEY_PLACEHOLDER","alias":"table_name","tableAlias":null}},{"type":"COLUMN","content":{"table":"column_name","column":"PRIM_KEY_PLACEHOLDER","alias":"column_name","tableAlias":null}}]}}},{"type":"basic","task":{"taskType":"basic","id":"task3","numCollected":500,"internalOffset":0,"taskOptions":"{\"options\":{\"1\":{\"layout\":\"HeatMap\",\"alignment\":{\"heat\":[\"Average_of_Distance\"],\"x\":[\"targetCol\"],\"tooltip\":[],\"y\":[\"sourceCol\"],\"facet\":[]}}},\"ornament\":false}","qs":{"qsType":"FRAME","frameName":"SimFrameaaQ541","isDistinct":true,"overrideImplicit":false,"limit":500,"offset":0,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"targetCol\",\"alias\":\"\"}","{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"sourceCol\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"targetCol","column":"PRIM_KEY_PLACEHOLDER","alias":"targetCol","tableAlias":null}},{"type":"COLUMN","content":{"table":"sourceCol","column":"PRIM_KEY_PLACEHOLDER","alias":"sourceCol","tableAlias":null}},{"type":"FUNCTION","content":{"alias":"Average_of_Distance","function":"mean","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"distance","column":"PRIM_KEY_PLACEHOLDER","alias":"distance","tableAlias":null}}]}}]}}},{"type":"basic","task":{"taskType":"basic","id":"task5","numCollected":2000,"internalOffset":0,"taskOptions":"null","qs":{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":2000,"offset":0,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"orders":["{\"sortDir\":\"ASC\",\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.util.Vector","value":[[2,3,4]],"opType":["OPERATION"]}}]}}},{"type":"basic","task":{"taskType":"basic","id":"task7","numCollected":2000,"internalOffset":0,"taskOptions":"null","qs":{"qsType":"FRAME","frameName":"PATIENT_TABLE","isDistinct":true,"overrideImplicit":true,"limit":2000,"offset":0,"relations":"[]","groups":["{\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"orders":["{\"sortDir\":\"ASC\",\"column\":\"PRIM_KEY_PLACEHOLDER\",\"table\":\"SSN\",\"alias\":\"\"}"],"selectors":[{"type":"COLUMN","content":{"table":"SSN","column":"PRIM_KEY_PLACEHOLDER","alias":"SSN","tableAlias":null}}],"havingFilters":["SIMPLE",{"left":{"pixelType":"COLUMN","class":"prerna.query.querystruct.selectors.QueryFunctionSelector","value":[{"type":"FUNCTION","content":{"alias":"Count_PATIENTS","function":"count","distinct":false,"colCast":"","innerSelectors":[{"type":"COLUMN","content":{"table":"PATIENTS","column":"PRIM_KEY_PLACEHOLDER","alias":"PATIENTS","tableAlias":null}}]}}],"opType":["OPERATION"]},"comparator":"==","right":{"pixelType":"CONST_INT","class":"java.lang.Integer","value":[1],"opType":["OPERATION"]}}]}}}],"taskCounter":8},"recipe":["AddPanel ( 0 ) ;","Panel ( 0 ) | AddPanelConfig ( config = [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;","Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>UnfilterFrame(<SelectedColumn>);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;","Panel ( 0 ) | RetrievePanelEvents ( ) ;","Panel ( 0 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ;","Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"<encode>{\"app_id\":\"17ba8657-f2fe-4050-8b54-d595af373bea\"}</encode>\" ) ;","## Create the Database Profile Frame ##","AddPanel ( 0 ) ;","CreateFrame ( Grid ) .as ( [ 'PROFILE_FRAME' ] ) | DatabaseProfile ( app = [ \"17ba8657-f2fe-4050-8b54-d595af373bea\" ] , concepts = [ \"ALLERGIES\" , \"CAREPLANS\" , \"CLAIMS\" , \"CONDITIONS\" , \"ENCOUNTERS\" , \"IMMUNIZATIONS\" , \"MEDICATIONS\" , \"PATIENTS\" , \"PROCEDURES\" ] ) ;","CreateFrame ( Grid ) .as ( [ 'PROFILE_FRAME2' ] ) | DatabaseProfile ( app = [ \"17ba8657-f2fe-4050-8b54-d595af373bea\" ] , concepts = [ \"ALLERGIES\" , \"CAREPLANS\" , \"CLAIMS\" , \"CONDITIONS\" , \"ENCOUNTERS\" , \"IMMUNIZATIONS\" , \"MEDICATIONS\" , \"PATIENTS\" , \"PROCEDURES\" ] ) ;","<j><encode>synchronizeGridToRDataTable(\"PROFILE_FRAME\")</encode></j> ;","## Create Graph ##","Panel ( 0 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ;","Frame ( frame = [ PROFILE_FRAME ] ) | Select ( table_name , column_name ) .as ( [ table_name , column_name ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'graph' ] , options = [ { \"connections\" : \"table_name.column_name;\" } ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Graph\" , \"alignment\" : { \"start\" : [ \"table_name\" ] , \"end\" : [ \"column_name\" ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ;","Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Nine\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;","Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;","Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"showAdjacent\" : true } } } ) ;","Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.showAdjacent\" ) ;","## Create Heat Map ##","RunDescriptionGenerator ( instance = [ column_name ] ) ;","if ( ( false ) , ( ( RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ true ] ) ; if ( ( HasDuplicates ( targetCol , sourceCol ) ) , ( Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) , ( ( SimFrame = RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ false ] ) ; AddPanel ( 1 ) ; Panel ( 1 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>UnfilterFrame(column_name);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onDoubleClick\" : { \"Filter\" : [ { \"panel\" : \"0\" , \"query\" : \"<encode>AddFrameFilter(column_name==<SelectedValues>);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ; Panel ( 1 ) | RetrievePanelEvents ( ) ; Panel ( 1 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ; if ( ( HasDuplicates ( frame = [ SimFrame ] , columns = [ targetCol , sourceCol ] ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) ) ;","Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"heatmapColor\" : [ \"#ffffe5\" , \"#f7fcb9\" , \"#d9f0a3\" , \"#addd8e\" , \"#78c679\" , \"#41ab5d\" , \"#238443\" , \"#006837\" , \"#004529\" , \"#00331f\" ] } } } ) ;","Panel ( 1 ) | RetrievePanelOrnaments ( \"tools\" ) ;","## Create Text Widget showing column counts ##","AddPanel ( 2 ) ;","Panel ( 2 ) | SetPanelView ( \"text-widget\" , \"<encode>{\"html\":\"<div ng-repeat=\\\"columnData in FrameData[0].output.data.values \\\" style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>{{columnData[0] | replaceUnderscores}}</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<ol>\\n<li><span> Frequency: </span><p class = \\\"ColumnDetails\\\">{{columnData[1] | replaceUnderscores}}</p></li>\\n<li><span> Tables: </span><p class = \\\"ColumnDetails\\\"> </p></li>\\n<br>\\n<div ng-repeat=\\\"tableData in FrameData2[0].output.data.values\\\" ng-if='columnData[0] == tableData[0]' style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<ul >\\n<li><p class = \\\"Tables\\\"> {{tableData[1] | replaceUnderscores}} </p></li>\\n</ul>\\n</div>\\n</ol>\\n<br>\\n</div>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget ol{\\n  color: #000000;\\n  list-style-type: none;\\n}\\n#TextWidget ol li{\\n  position: relative;\\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\\n  margin-bottom: 20px;\\n}\\n#TextWidget li p.ColumnDetails{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 110px;\\n  color: #000000;\\n}\\n#TextWidget li p.Tables{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 5px;\\n  color: #000000;\\n}\\n#TextWidget ul > li{margin-left:90px;\\n} \\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"FrameData\",\"query\":\"Frame( frame = [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name != [\\\"PRIM_KEY_PLACEHOLDER\\\"]) | Sort ( columns = [CountOfcolumn_name], sort = [\\\"desc\\\"]) | Iterate() | Collect(500);\"},{\"name\":\"FrameData2\",\"query\":\"Frame( frame = [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);\"}],\"freeze\":false,\"loading\":true}</encode>\" ) ;","## Finding Duplicates in Patient Table ##","AddPanel ( 3 ) ;","Panel ( 3 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>UnfilterFrame(<SelectedColumn>);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;","Panel ( 3 ) | RetrievePanelEvents ( ) ;","CreateFrame ( frameType = [ GRID ] , override = [ true ] ) .as ( [ 'PATIENT_TABLE' ] ) ;","Database ( database = [ \"c4a6fcb2-e130-440c-a7c8-caa0e6814941\" ] ) | Select ( PATIENTS , PATIENTS__SSN ) .as ( [ PATIENTS , SSN ] ) | Filter ( Count ( PATIENTS ) > 0 ) | Import ( frame = [ PATIENT_TABLE ] ) ;","Panel ( 3 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ;","Frame ( Frame = [ PATIENT_TABLE ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ 3 ] , layout = [ \"Grid\" ] ) | Collect ( 500 ) ;","if ( ( Frame ( Frame = [ PATIENT_TABLE ] ) | HasDuplicates ( SSN ) ) , ( Frame ( Frame = [ PATIENT_TABLE ] ) | Select ( SSN , Count ( PATIENTS ) ) .as ( [ SSN , Count_of_PATIENTS ] ) | Group ( SSN ) | With ( Panel ( 3 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"Count_of_PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( Frame = [ PATIENT_TABLE ] ) | Select ( SSN , PATIENTS ) .as ( [ SSN , PATIENTS ] ) | With ( Panel ( 3 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;","cbv_1557433743057 = Frame ( ) | ImplicitFilterOverride ( true ) | Select ( SSN ) | Group ( SSN ) | Having ( ( Count ( PATIENTS ) == [ 2 , 3 , 4 ] ) ) ;","Panel ( 3 ) | AddPanelColorByValue ( name = [ \"cbv_1557433743057\" ] , qs = [ cbv_1557433743057 ] , options = [ { \"color\" : \"#86BC24\" , \"colorOn\" : \"SSN\" , \"valuesColumn\" : \"Count_of_PATIENTS\" } ] ) ;","Panel ( 3 ) | RetrievePanelColorByValue ( name = [ \"cbv_1557433743057\" ] ) | Collect ( 2000 ) ;","cbv_1557433856937 = Frame ( ) | ImplicitFilterOverride ( true ) | Select ( SSN ) | Group ( SSN ) | Having ( ( Count ( PATIENTS ) == [ 1 ] ) ) ;","Panel ( 3 ) | AddPanelColorByValue ( name = [ \"cbv_1557433856937\" ] , qs = [ cbv_1557433856937 ] , options = [ { \"color\" : \"#000000\" , \"colorOn\" : \"SSN\" , \"valuesColumn\" : \"Count_of_PATIENTS\" } ] ) ;","Panel ( 3 ) | RetrievePanelColorByValue ( name = [ \"cbv_1557433856937\" ] ) | Collect ( 2000 ) ;","## Text Widget of PAMPI Dashboard ##","AddPanel ( 4 ) ;","Panel ( 4 ) | SetPanelView ( \"text-widget\" , \"<encode>{\"html\":\"<body>\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>Data MetaModel</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<div class = \\\"listItem\\\">As you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother</font></div>\\n<img src=\\\"http://drive.google.com/uc?export=view&id=1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\\\" alt=\\\"PAMPI Metamodel\\\" width=\\\"1000\\\" height=\\\"666\\\">\\n</body>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget .listItem{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 20px;\\n  padding-top: 5px;\\n  padding-bottom: 10 px;\\n  color: #000000;\\n}\\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"\",\"query\":\"\"}],\"freeze\":false,\"loading\":true}</encode>\" ) ;","Panel ( 4 ) | SetPanelLabel ( \"_\" ) ;","## Set Panel Labels ##","Panel ( 0 ) | SetPanelLabel ( \"General Data Messiness\" ) ;","Panel ( 1 ) | SetPanelLabel ( \"Semantic Column Similarity\" ) ;","Panel ( 2 ) | SetPanelLabel ( \"Columns in Multiple Tables\" ) ;","Panel ( 3 ) | SetPanelLabel ( \"Finding Duplicate Entities in a Table\" ) ;","if ( IsEmpty ( [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) , UnfilterFrame ( SSN ) , SetFrameFilter ( SSN == [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) ) ;","UnfilterFrame ( SSN ) ;","if ( IsEmpty ( [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) , UnfilterFrame ( SSN ) , SetFrameFilter ( SSN == [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) ) ;","Panel ( 0 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 0 , \"width\" : 29 . 644495412844034 , \"height\" : 36 . 803874092009686 } ) ;","Panel ( 1 ) | SetPanelPosition ( { \"top\" : 37 . 04600484261501 , \"left\" : 0 , \"width\" : 29 . 52981651376147 , \"height\" : 62 . 95399515738499 } ) ;","Panel ( 2 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 76 . 08944954128441 , \"width\" : 23 . 56651376146789 , \"height\" : 100 } ) ;","Panel ( 3 ) | SetPanelPosition ( { \"top\" : 60 . 41162227602905 , \"left\" : 29 . 701834862385322 , \"width\" : 46 . 215596330275226 , \"height\" : 39 . 58837772397095 } ) ;","Panel ( 4 ) | SetPanelPosition ( { \"top\" : 0 , \"left\" : 29 . 759174311926607 , \"width\" : 46 . 10091743119266 , \"height\" : 60 . 048426150121074 } ) ;"]}