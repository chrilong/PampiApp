{
  "layout": "panel",
  "rdbmsId": "67d134f2-211a-4ebd-8768-e5601f04349a",
  "hidden": true,
  "insightName": "Dashboard 1 - 0",
  "recipe": "AddPanel ( 0 ) ;Panel ( 0 ) | AddPanelConfig ( config \u003d [ { \"config\" : { \"type\" : \"STANDARD\" , \"opacity\" : 100 } } ] ) ;Panel ( 0 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 0 ) | RetrievePanelEvents ( ) ;Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Panel ( 0 ) | SetPanelView ( \"federate-view\" , \"\u003cencode\u003e{\"app_id\":\"17ba8657-f2fe-4050-8b54-d595af373bea\"}\u003c/encode\u003e\" ) ;## Create the Database Profile Frame ##AddPanel ( 0 ) ;CreateFrame ( Grid ) .as ( [ \u0027PROFILE_FRAME\u0027 ] ) | DatabaseProfile ( app \u003d [ \"17ba8657-f2fe-4050-8b54-d595af373bea\" ] , concepts \u003d [ \"ALLERGIES\" , \"CAREPLANS\" , \"CLAIMS\" , \"CONDITIONS\" , \"ENCOUNTERS\" , \"IMMUNIZATIONS\" , \"MEDICATIONS\" , \"PATIENTS\" , \"PROCEDURES\" ] ) ;CreateFrame ( Grid ) .as ( [ \u0027PROFILE_FRAME2\u0027 ] ) | DatabaseProfile ( app \u003d [ \"17ba8657-f2fe-4050-8b54-d595af373bea\" ] , concepts \u003d [ \"ALLERGIES\" , \"CAREPLANS\" , \"CLAIMS\" , \"CONDITIONS\" , \"ENCOUNTERS\" , \"IMMUNIZATIONS\" , \"MEDICATIONS\" , \"PATIENTS\" , \"PROCEDURES\" ] ) ;\u003cj\u003e\u003cencode\u003esynchronizeGridToRDataTable(\"PROFILE_FRAME\")\u003c/encode\u003e\u003c/j\u003e ;## Create Graph ##Panel ( 0 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Frame ( frame \u003d [ PROFILE_FRAME ] ) | Select ( table_name , column_name ) .as ( [ table_name , column_name ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027graph\u0027 ] , options \u003d [ { \"connections\" : \"table_name.column_name;\" } ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"Graph\" , \"alignment\" : { \"start\" : [ \"table_name\" ] , \"end\" : [ \"column_name\" ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"colorName\" : \"Nine\" , \"color\" : { } , \"backgroundColor\" : \"#FFFFFF\" } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools\" ) ;Panel ( 0 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"showAdjacent\" : true } } } ) ;Panel ( 0 ) | RetrievePanelOrnaments ( \"tools.shared.showAdjacent\" ) ;## Create Heat Map ##RunDescriptionGenerator ( instance \u003d [ column_name ] ) ;if ( ( false ) , ( ( RunDocCosSimilarity ( instance \u003d [ column_name ] , description \u003d [ description ] , override \u003d [ true ] ) ; if ( ( HasDuplicates ( targetCol , sourceCol ) ) , ( Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 0 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) , ( ( SimFrame \u003d RunDocCosSimilarity ( instance \u003d [ column_name ] , description \u003d [ description ] , override \u003d [ false ] ) ; AddPanel ( 1 ) ; Panel ( 1 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(column_name);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onDoubleClick\" : { \"Filter\" : [ { \"panel\" : \"0\" , \"query\" : \"\u003cencode\u003eAddFrameFilter(column_name\u003d\u003d\u003cSelectedValues\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ; Panel ( 1 ) | RetrievePanelEvents ( ) ; Panel ( 1 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ; if ( ( HasDuplicates ( frame \u003d [ SimFrame ] , columns \u003d [ targetCol , sourceCol ] ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 1 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) ) ;Panel ( 1 ) | AddPanelOrnaments ( { \"tools\" : { \"shared\" : { \"heatmapColor\" : [ \"#ffffe5\" , \"#f7fcb9\" , \"#d9f0a3\" , \"#addd8e\" , \"#78c679\" , \"#41ab5d\" , \"#238443\" , \"#006837\" , \"#004529\" , \"#00331f\" ] } } } ) ;Panel ( 1 ) | RetrievePanelOrnaments ( \"tools\" ) ;## Create Text Widget showing column counts ##AddPanel ( 2 ) ;Panel ( 2 ) | SetPanelView ( \"text-widget\" , \"\u003cencode\u003e{\"html\":\"\u003cdiv ng-repeat\u003d\\\"columnData in FrameData[0].output.data.values \\\" style\u003d\\\"word-wrap: break-word; margin-right: 25px\\\"\u003e\\n\u003cdiv class \u003d \\\"header\\\"\u003e \u003cfont size \u003d \\\"5\\\" color \u003d \\\"white\\\"\u003e\u003cb\u003e{{columnData[0] | replaceUnderscores}}\u003c/b\u003e\u003c/font\u003e\u003c/div\u003e\\n\u003cdiv id\u003d\\\"colorstrip\\\"\u003e\u003c/div\u003e\\n\u003col\u003e\\n\u003cli\u003e\u003cspan\u003e Frequency: \u003c/span\u003e\u003cp class \u003d \\\"ColumnDetails\\\"\u003e{{columnData[1] | replaceUnderscores}}\u003c/p\u003e\u003c/li\u003e\\n\u003cli\u003e\u003cspan\u003e Tables: \u003c/span\u003e\u003cp class \u003d \\\"ColumnDetails\\\"\u003e \u003c/p\u003e\u003c/li\u003e\\n\u003cbr\u003e\\n\u003cdiv ng-repeat\u003d\\\"tableData in FrameData2[0].output.data.values\\\" ng-if\u003d\u0027columnData[0] \u003d\u003d tableData[0]\u0027 style\u003d\\\"word-wrap: break-word; margin-right: 25px\\\"\u003e\\n\u003cul \u003e\\n\u003cli\u003e\u003cp class \u003d \\\"Tables\\\"\u003e {{tableData[1] | replaceUnderscores}} \u003c/p\u003e\u003c/li\u003e\\n\u003c/ul\u003e\\n\u003c/div\u003e\\n\u003c/ol\u003e\\n\u003cbr\u003e\\n\u003c/div\u003e\\n\\n\u003cstyle\u003e\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget ol{\\n  color: #000000;\\n  list-style-type: none;\\n}\\n#TextWidget ol li{\\n  position: relative;\\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\\n  margin-bottom: 20px;\\n}\\n#TextWidget li p.ColumnDetails{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 110px;\\n  color: #000000;\\n}\\n#TextWidget li p.Tables{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 5px;\\n  color: #000000;\\n}\\n#TextWidget ul \u003e li{margin-left:90px;\\n} \\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n\u003c/style\u003e\",\"varList\":[{\"name\":\"FrameData\",\"query\":\"Frame( frame \u003d [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name !\u003d [\\\"PRIM_KEY_PLACEHOLDER\\\"]) | Sort ( columns \u003d [CountOfcolumn_name], sort \u003d [\\\"desc\\\"]) | Iterate() | Collect(500);\"},{\"name\":\"FrameData2\",\"query\":\"Frame( frame \u003d [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);\"}],\"freeze\":false,\"loading\":true}\u003c/encode\u003e\" ) ;## Finding Duplicates in Patient Table ##AddPanel ( 3 ) ;Panel ( 3 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eUnfilterFrame(\u003cSelectedColumn\u003e);\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onBrush\" : { \"Filter\" : [ { \"panel\" : \"\" , \"query\" : \"\u003cencode\u003eif(IsEmpty(\u003cSelectedValues\u003e), UnfilterFrame(\u003cSelectedColumn\u003e), SetFrameFilter(\u003cSelectedColumn\u003e\u003d\u003d\u003cSelectedValues\u003e));\u003c/encode\u003e\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ;Panel ( 3 ) | RetrievePanelEvents ( ) ;CreateFrame ( frameType \u003d [ GRID ] , override \u003d [ true ] ) .as ( [ \u0027PATIENT_TABLE\u0027 ] ) ;Database ( database \u003d [ \"c4a6fcb2-e130-440c-a7c8-caa0e6814941\" ] ) | Select ( PATIENTS , PATIENTS__SSN ) .as ( [ PATIENTS , SSN ] ) | Filter ( Count ( PATIENTS ) \u003e 0 ) | Import ( frame \u003d [ PATIENT_TABLE ] ) ;Panel ( 3 ) | SetPanelView ( \"visualization\" , \"\u003cencode\u003e{\"type\":\"echarts\"}\u003c/encode\u003e\" ) ;Frame ( Frame \u003d [ PATIENT_TABLE ] ) | QueryAll ( ) | AutoTaskOptions ( panel \u003d [ 3 ] , layout \u003d [ \"Grid\" ] ) | Collect ( 500 ) ;if ( ( Frame ( Frame \u003d [ PATIENT_TABLE ] ) | HasDuplicates ( SSN ) ) , ( Frame ( Frame \u003d [ PATIENT_TABLE ] ) | Select ( SSN , Count ( PATIENTS ) ) .as ( [ SSN , Count_of_PATIENTS ] ) | Group ( SSN ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"Count_of_PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( Frame \u003d [ PATIENT_TABLE ] ) | Select ( SSN , PATIENTS ) .as ( [ SSN , PATIENTS ] ) | With ( Panel ( 3 ) ) | Format ( type \u003d [ \u0027table\u0027 ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;cbv_1557433743057 \u003d Frame ( ) | ImplicitFilterOverride ( true ) | Select ( SSN ) | Group ( SSN ) | Having ( ( Count ( PATIENTS ) \u003d\u003d [ 2 , 3 , 4 ] ) ) ;Panel ( 3 ) | AddPanelColorByValue ( name \u003d [ \"cbv_1557433743057\" ] , qs \u003d [ cbv_1557433743057 ] , options \u003d [ { \"color\" : \"#86BC24\" , \"colorOn\" : \"SSN\" , \"valuesColumn\" : \"Count_of_PATIENTS\" } ] ) ;Panel ( 3 ) | RetrievePanelColorByValue ( name \u003d [ \"cbv_1557433743057\" ] ) | Collect ( 2000 ) ;cbv_1557433856937 \u003d Frame ( ) | ImplicitFilterOverride ( true ) | Select ( SSN ) | Group ( SSN ) | Having ( ( Count ( PATIENTS ) \u003d\u003d [ 1 ] ) ) ;Panel ( 3 ) | AddPanelColorByValue ( name \u003d [ \"cbv_1557433856937\" ] , qs \u003d [ cbv_1557433856937 ] , options \u003d [ { \"color\" : \"#000000\" , \"colorOn\" : \"SSN\" , \"valuesColumn\" : \"Count_of_PATIENTS\" } ] ) ;Panel ( 3 ) | RetrievePanelColorByValue ( name \u003d [ \"cbv_1557433856937\" ] ) | Collect ( 2000 ) ;## Text Widget of PAMPI Dashboard ##AddPanel ( 4 ) ;Panel ( 4 ) | SetPanelView ( \"text-widget\" , \"\u003cencode\u003e{\"html\":\"\u003cbody\u003e\\n\u003cdiv class \u003d \\\"header\\\"\u003e \u003cfont size \u003d \\\"5\\\" color \u003d \\\"white\\\"\u003e\u003cb\u003eData MetaModel\u003c/b\u003e\u003c/font\u003e\u003c/div\u003e\\n\u003cdiv id\u003d\\\"colorstrip\\\"\u003e\u003c/div\u003e\\n\u003cdiv class \u003d \\\"listItem\\\"\u003eAs you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother\u003c/font\u003e\u003c/div\u003e\\n\u003cimg src\u003d\\\"http://drive.google.com/uc?export\u003dview\u0026id\u003d1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\\\" alt\u003d\\\"PAMPI Metamodel\\\" width\u003d\\\"1000\\\" height\u003d\\\"666\\\"\u003e\\n\u003c/body\u003e\\n\\n\u003cstyle\u003e\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget .listItem{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 20px;\\n  padding-top: 5px;\\n  padding-bottom: 10 px;\\n  color: #000000;\\n}\\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n\u003c/style\u003e\",\"varList\":[{\"name\":\"\",\"query\":\"\"}],\"freeze\":false,\"loading\":true}\u003c/encode\u003e\" ) ;Panel ( 4 ) | SetPanelLabel ( \"_\" ) ;## Set Panel Labels ##Panel ( 0 ) | SetPanelLabel ( \"General Data Messiness\" ) ;Panel ( 1 ) | SetPanelLabel ( \"Semantic Column Similarity\" ) ;Panel ( 2 ) | SetPanelLabel ( \"Columns in Multiple Tables\" ) ;Panel ( 3 ) | SetPanelLabel ( \"Finding Duplicate Entities in a Table\" ) ;if ( IsEmpty ( [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) , UnfilterFrame ( SSN ) , SetFrameFilter ( SSN \u003d\u003d [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) ) ;UnfilterFrame ( SSN ) ;if ( IsEmpty ( [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) , UnfilterFrame ( SSN ) , SetFrameFilter ( SSN \u003d\u003d [ \"999-12-7978\" , \"999-14-4898\" , \"999-20-1543\" , \"999-22-1191\" , \"999-26-3905\" , \"999-32-2222\" , \"999-32-4835\" , \"999-35-5246\" , \"999-36-3437\" , \"999-36-7534\" , \"999-36-9989\" , \"999-37-4421\" , \"999-43-7618\" , \"999-48-7529\" , \"999-49-1523\" , \"999-50-6701\" , \"999-55-8318\" , \"999-56-9439\" , \"999-58-6412\" , \"999-60-9688\" , \"999-65-4799\" , \"999-65-9406\" , \"999-69-3856\" , \"999-73-2691\" , \"999-79-8310\" , \"999-82-1438\" , \"999-83-4011\" , \"999-92-1074\" , \"999-94-1050\" , \"999-98-3240\" , \"999-98-4218\" ] ) ) ;Panel(0)|SetPanelPosition({\"top\":0,\"left\":0,\"width\":29.644495412844034,\"height\":36.803874092009686});Panel(1)|SetPanelPosition({\"top\":37.04600484261501,\"left\":0,\"width\":29.52981651376147,\"height\":62.95399515738499});Panel(2)|SetPanelPosition({\"top\":0,\"left\":76.08944954128441,\"width\":23.56651376146789,\"height\":100});Panel(3)|SetPanelPosition({\"top\":60.41162227602905,\"left\":29.701834862385322,\"width\":46.215596330275226,\"height\":39.58837772397095});Panel(4)|SetPanelPosition({\"top\":0,\"left\":29.759174311926607,\"width\":46.10091743119266,\"height\":60.048426150121074});",
  "engineId": "17ba8657-f2fe-4050-8b54-d595af373bea"
}