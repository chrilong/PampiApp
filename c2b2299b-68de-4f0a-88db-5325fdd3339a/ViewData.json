{"insightID":"093a6474-280e-4b81-92d5-ccc7b2f5c519","pixelReturn":[{"pixelExpression":"CachedPanel ( \"0\" ) ;","isMeta":false,"output":{"panelId":"0","panelLabel":"General Data Messiness","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{"tools":{"shared":{"colorName":"Nine","backgroundColor":"#FFFFFF","color":{},"showAdjacent":true}}},"events":{},"comments":{},"position":{"top":0.0,"left":0.0,"width":27.500000000000004,"height":33.46891223545596},"filters":[],"order":[],"cbv":[]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"CachedPanel ( \"0\" ) ;","isMeta":false,"output":{"panelId":"0","panelLabel":"General Data Messiness","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{"tools":{"shared":{"colorName":"Nine","backgroundColor":"#FFFFFF","color":{},"showAdjacent":true}}},"events":{},"comments":{},"position":{"top":0.0,"left":0.0,"width":27.500000000000004,"height":33.46891223545596},"filters":[],"order":[],"cbv":[]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"CachedPanel ( \"1\" ) ;","isMeta":false,"output":{"panelId":"1","panelLabel":"Semantic Column Similarity","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{"tools":{"shared":{"heatmapColor":["#ffffe5","#f7fcb9","#d9f0a3","#addd8e","#78c679","#41ab5d","#238443","#006837","#004529","#00331f"]}}},"events":{"onSingleClick":{"Unfilter":[{"disabledVisuals":["Grid","Sunburst"],"default":true,"query":"UnfilterFrame(column_name);","options":{},"refresh":false,"disabled":false,"panel":""}]},"onDoubleClick":{"Filter":[{"default":true,"query":"AddFrameFilter(column_name==<SelectedValues>);","options":{},"refresh":false,"disabled":false,"panel":"0"}]}},"comments":{},"position":{"top":33.772455089820355,"left":0.0,"width":27.443181818181817,"height":66.22754491017963},"filters":[],"order":[],"cbv":[]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"CachedPanel ( \"2\" ) ;","isMeta":false,"output":{"panelId":"2","panelLabel":"Columns in Multiple Tables","view":"text-widget","viewOptions":"{\"html\":\"<div ng-repeat=\\\"columnData in FrameData[0].output.data.values \\\" style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>{{columnData[0] | replaceUnderscores}}</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<ol>\\n<li><span> Frequency: </span><p class = \\\"ColumnDetails\\\">{{columnData[1] | replaceUnderscores}}</p></li>\\n<li><span> Tables: </span><p class = \\\"ColumnDetails\\\"> </p></li>\\n<br>\\n<div ng-repeat=\\\"tableData in FrameData2[0].output.data.values\\\" ng-if='columnData[0] == tableData[0]' style=\\\"word-wrap: break-word; margin-right: 25px\\\">\\n<ul >\\n<li><p class = \\\"Tables\\\"> {{tableData[1] | replaceUnderscores}} </p></li>\\n</ul>\\n</div>\\n</ol>\\n<br>\\n</div>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget ol{\\n  color: #000000;\\n  list-style-type: none;\\n}\\n#TextWidget ol li{\\n  position: relative;\\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\\n  margin-bottom: 20px;\\n}\\n#TextWidget li p.ColumnDetails{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 110px;\\n  color: #000000;\\n}\\n#TextWidget li p.Tables{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 5px;\\n  color: #000000;\\n}\\n#TextWidget ul > li{margin-left:90px;\\n} \\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"FrameData\",\"query\":\"Frame( frame = [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name != [\\\"PRIM_KEY_PLACEHOLDER\\\"]) | Sort ( columns = [CountOfcolumn_name], sort = [\\\"desc\\\"]) | Iterate() | Collect(500);\"},{\"name\":\"FrameData2\",\"query\":\"Frame( frame = [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);\"}],\"freeze\":false,\"loading\":true}","viewOptionsMap":{"text-widget":{"html":"<div ng-repeat=\"columnData in FrameData[0].output.data.values \" style=\"word-wrap: break-word; margin-right: 25px\">\n<div class = \"header\"> <font size = \"5\" color = \"white\"><b>{{columnData[0] | replaceUnderscores}}</b></font></div>\n<div id=\"colorstrip\"></div>\n<ol>\n<li><span> Frequency: </span><p class = \"ColumnDetails\">{{columnData[1] | replaceUnderscores}}</p></li>\n<li><span> Tables: </span><p class = \"ColumnDetails\"> </p></li>\n<br>\n<div ng-repeat=\"tableData in FrameData2[0].output.data.values\" ng-if='columnData[0] == tableData[0]' style=\"word-wrap: break-word; margin-right: 25px\">\n<ul >\n<li><p class = \"Tables\"> {{tableData[1] | replaceUnderscores}} </p></li>\n</ul>\n</div>\n</ol>\n<br>\n</div>\n\n<style>\n\n#TextWidget #colorstrip{\n    width: 100%; height: 2px;\n    border-style: solid;\n    border-color: #86BC24;\n    background-color: #86BC24;\n}\n#TextWidget .header{\nbackground-color: #000000;\n}\n#TextWidget ol{\n  color: #000000;\n  list-style-type: none;\n}\n#TextWidget ol li{\n  position: relative;\n  font: bold italic 16px/1.5 Helvetica, Verdana, sans-serif;\n  margin-bottom: 20px;\n}\n#TextWidget li p.ColumnDetails{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 110px;\n  color: #000000;\n}\n#TextWidget li p.Tables{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 5px;\n  color: #000000;\n}\n#TextWidget ul > li{margin-left:90px;\n} \n\n#TextWidget span{\n  position: absolute;\n}\n</style>","varList":[{"name":"FrameData","query":"Frame( frame = [PROFILE_FRAME] ) | Select ( column_name , count(column_name) ) .as ( [ column_name , CountOfcolumn_name]) | Group(column_name)| Filter(column_name != [\"PRIM_KEY_PLACEHOLDER\"]) | Sort ( columns = [CountOfcolumn_name], sort = [\"desc\"]) | Iterate() | Collect(500);"},{"name":"FrameData2","query":"Frame( frame = [PROFILE_FRAME]) | Select ( column_name , table_name ) | Iterate() | Collect(500);"}],"freeze":false,"loading":true}},"config":{},"ornaments":{},"events":{},"comments":{},"position":{"top":0.0,"left":76.30681818181819,"width":23.636363636363626,"height":100.0},"filters":[],"order":[],"cbv":[]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"CachedPanel ( \"3\" ) ;","isMeta":false,"output":{"panelId":"3","panelLabel":"Finding Duplicate Entities in a Table","view":"visualization","viewOptions":"{\"type\":\"echarts\"}","viewOptionsMap":{"visualization":{"type":"echarts"}},"config":{},"ornaments":{},"events":{"onSingleClick":{"Unfilter":[{"disabledVisuals":["Grid","Sunburst"],"default":true,"query":"UnfilterFrame(<SelectedColumn>);","options":{},"refresh":false,"disabled":false,"panel":""}]},"onBrush":{"Filter":[{"default":true,"query":"if(IsEmpty(<SelectedValues>), UnfilterFrame(<SelectedColumn>), SetFrameFilter(<SelectedColumn>==<SelectedValues>));","options":{},"refresh":false,"disabled":false,"panel":""}]}},"comments":{},"position":{"top":67.54491017964071,"left":27.556818181818183,"width":48.52272727272727,"height":32.30538922155689},"filters":[],"order":[],"cbv":[{"name":"cbv_1557433743057","options":{"color":"#86BC24","colorOn":"SSN","valuesColumn":"Count_of_PATIENTS"},"filterInfo":[],"havingInfo":[{"filterObj":{"comparator":"==","left":{"type":"COLUMN","value":"Count(PATIENTS)"},"right":{"type":"CONST_INT","value":[2.0,3.0,4.0]},"filterType":"SIMPLE"},"filterStr":"Count(PATIENTS) == [2.0, 3.0, 4.0 ]"}]},{"name":"cbv_1557433856937","options":{"color":"#000000","colorOn":"SSN","valuesColumn":"Count_of_PATIENTS"},"filterInfo":[],"havingInfo":[{"filterObj":{"comparator":"==","left":{"type":"COLUMN","value":"Count(PATIENTS)"},"right":{"type":"CONST_INT","value":1},"filterType":"SIMPLE"},"filterStr":"Count(PATIENTS) == 1"}]}]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"CachedPanel ( \"4\" ) ;","isMeta":false,"output":{"panelId":"4","panelLabel":"_","view":"text-widget","viewOptions":"{\"html\":\"<body>\\n<div class = \\\"header\\\"> <font size = \\\"5\\\" color = \\\"white\\\"><b>Data MetaModel</b></font></div>\\n<div id=\\\"colorstrip\\\"></div>\\n<div class = \\\"listItem\\\">As you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother</font></div>\\n<img src=\\\"http://drive.google.com/uc?export=view&id=1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\\\" alt=\\\"PAMPI Metamodel\\\" width=\\\"1000\\\" height=\\\"666\\\">\\n</body>\\n\\n<style>\\n\\n#TextWidget #colorstrip{\\n    width: 100%; height: 2px;\\n    border-style: solid;\\n    border-color: #86BC24;\\n    background-color: #86BC24;\\n}\\n#TextWidget .header{\\nbackground-color: #000000;\\n}\\n#TextWidget .listItem{\\n  font: 16px/1.5 Helvetica, sans-serif;\\n  padding-left: 20px;\\n  padding-top: 5px;\\n  padding-bottom: 10 px;\\n  color: #000000;\\n}\\n\\n#TextWidget span{\\n  position: absolute;\\n}\\n</style>\",\"varList\":[{\"name\":\"\",\"query\":\"\"}],\"freeze\":false,\"loading\":true}","viewOptionsMap":{"text-widget":{"html":"<body>\n<div class = \"header\"> <font size = \"5\" color = \"white\"><b>Data MetaModel</b></font></div>\n<div id=\"colorstrip\"></div>\n<div class = \"listItem\">As you can see below, the PAMPI metamodel consists of 10 disjointed tables that do not interact with eachother</font></div>\n<img src=\"http://drive.google.com/uc?export=view&id=1Rhao0nRoUsuF1OHEpfzPYiAGDmctyQGK\" alt=\"PAMPI Metamodel\" width=\"1000\" height=\"666\">\n</body>\n\n<style>\n\n#TextWidget #colorstrip{\n    width: 100%; height: 2px;\n    border-style: solid;\n    border-color: #86BC24;\n    background-color: #86BC24;\n}\n#TextWidget .header{\nbackground-color: #000000;\n}\n#TextWidget .listItem{\n  font: 16px/1.5 Helvetica, sans-serif;\n  padding-left: 20px;\n  padding-top: 5px;\n  padding-bottom: 10 px;\n  color: #000000;\n}\n\n#TextWidget span{\n  position: absolute;\n}\n</style>","varList":[{"name":"","query":""}],"freeze":false,"loading":true}},"config":{},"ornaments":{},"events":{},"comments":{},"position":{"top":0.0,"left":27.613636363636363,"width":48.57954545454545,"height":67.3053892215569},"filters":[],"order":[],"cbv":[]},"operationType":["CACHED_PANEL"]},{"pixelExpression":"if ( ( false ) , ( ( RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ true ] ) ; if ( ( HasDuplicates ( targetCol , sourceCol ) ) , ( Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) , ( ( SimFrame = RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ false ] ) ; AddPanel ( 1 ) ; Panel ( 1 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>UnfilterFrame(column_name);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onDoubleClick\" : { \"Filter\" : [ { \"panel\" : \"0\" , \"query\" : \"<encode>AddFrameFilter(column_name==<SelectedValues>);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ; Panel ( 1 ) | RetrievePanelEvents ( ) ; Panel ( 1 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ; if ( ( HasDuplicates ( frame = [ SimFrame ] , columns = [ targetCol , sourceCol ] ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) ) ;","isMeta":false,"output":"prerna.ds.h2.H2Frame cannot be cast to prerna.ds.r.RDataTable","operationType":["ERROR"]},{"pixelExpression":"if ( ( false ) , ( ( RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ true ] ) ; if ( ( HasDuplicates ( targetCol , sourceCol ) ) , ( Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 0 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"0\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) , ( ( SimFrame = RunDocCosSimilarity ( instance = [ column_name ] , description = [ description ] , override = [ false ] ) ; AddPanel ( 1 ) ; Panel ( 1 ) | AddPanelEvents ( { \"onSingleClick\" : { \"Unfilter\" : [ { \"panel\" : \"\" , \"query\" : \"<encode>UnfilterFrame(column_name);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabledVisuals\" : [ \"Grid\" , \"Sunburst\" ] , \"disabled\" : false } ] } , \"onDoubleClick\" : { \"Filter\" : [ { \"panel\" : \"0\" , \"query\" : \"<encode>AddFrameFilter(column_name==<SelectedValues>);</encode>\" , \"options\" : { } , \"refresh\" : false , \"default\" : true , \"disabled\" : false } ] } } ) ; Panel ( 1 ) | RetrievePanelEvents ( ) ; Panel ( 1 ) | SetPanelView ( \"visualization\" , \"<encode>{\"type\":\"echarts\"}</encode>\" ) ; if ( ( HasDuplicates ( frame = [ SimFrame ] , columns = [ targetCol , sourceCol ] ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , Average ( distance ) ) .as ( [ targetCol , sourceCol , Average_of_Distance ] ) | Group ( targetCol , sourceCol ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"Average_of_Distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) , ( Frame ( SimFrame ) | Select ( targetCol , sourceCol , distance ) .as ( [ targetCol , sourceCol , distance ] ) | With ( Panel ( 1 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"1\" : { \"layout\" : \"HeatMap\" , \"alignment\" : { \"x\" : [ \"targetCol\" ] , \"y\" : [ \"sourceCol\" ] , \"heat\" : [ \"distance\" ] , \"facet\" : [ ] , \"tooltip\" : [ ] } } } ) | Collect ( 500 ) ) ) ; ) ) ) ;","isMeta":false,"output":"prerna.ds.h2.H2Frame cannot be cast to prerna.ds.r.RDataTable","operationType":["ERROR"]},{"pixelExpression":"if ( ( Frame ( Frame = [ PATIENT_TABLE ] ) | HasDuplicates ( SSN ) ) , ( Frame ( Frame = [ PATIENT_TABLE ] ) | Select ( SSN , Count ( PATIENTS ) ) .as ( [ SSN , Count_of_PATIENTS ] ) | Group ( SSN ) | With ( Panel ( 3 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"Count_of_PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) , ( Frame ( Frame = [ PATIENT_TABLE ] ) | Select ( SSN , PATIENTS ) .as ( [ SSN , PATIENTS ] ) | With ( Panel ( 3 ) ) | Format ( type = [ 'table' ] ) | TaskOptions ( { \"3\" : { \"layout\" : \"Column\" , \"alignment\" : { \"label\" : [ \"SSN\" ] , \"value\" : [ \"PATIENTS\" ] , \"tooltip\" : [ ] , \"facet\" : [ ] } } } ) | Collect ( 2000 ) ) ) ;","isMeta":false,"output":{"data":{"values":[["999-12-7978",2.0],["999-14-4898",2.0],["999-20-1543",3.0],["999-22-1191",2.0],["999-26-3905",2.0],["999-32-2222",3.0],["999-32-4835",2.0],["999-35-5246",2.0],["999-36-3437",2.0],["999-36-7534",3.0],["999-36-9989",2.0],["999-37-4421",2.0],["999-43-7618",2.0],["999-48-7529",2.0],["999-49-1523",2.0],["999-50-6701",3.0],["999-55-8318",3.0],["999-56-9439",3.0],["999-58-6412",2.0],["999-60-9688",2.0],["999-65-4799",2.0],["999-65-9406",2.0],["999-69-3856",3.0],["999-73-2691",2.0],["999-79-8310",2.0],["999-82-1438",4.0],["999-83-4011",3.0],["999-92-1074",2.0],["999-94-1050",2.0],["999-98-3240",2.0],["999-98-4218",2.0]],"headers":["SSN","Count_of_PATIENTS"],"rawHeaders":["SSN","Count_of_PATIENTS"]},"headerInfo":[{"alias":"SSN","header":"SSN","type":"STRING","derived":false},{"alias":"Count_of_PATIENTS","header":"Count_of_PATIENTS","calculatedBy":"PATIENTS","groupBy":["SSN"],"math":"Count","type":"NUMBER","derived":true}],"sortInfo":[],"numRows":31,"numCollected":2000,"taskOptions":{"3":{"layout":"Column","alignment":{"tooltip":[],"label":["SSN"],"value":["Count_of_PATIENTS"],"facet":[]}}},"format":{"type":"TABLE"},"filterInfo":[],"taskId":"task5"},"operationType":["TASK_DATA"]},{"pixelExpression":"Panel ( 3 ) | RetrievePanelColorByValue ( name = [ \"cbv_1557433743057\" ] ) | Collect ( 2000 ) ;","isMeta":false,"output":{"data":{"values":[["999-12-7978"],["999-14-4898"],["999-20-1543"],["999-22-1191"],["999-26-3905"],["999-32-2222"],["999-32-4835"],["999-35-5246"],["999-36-3437"],["999-36-7534"],["999-36-9989"],["999-37-4421"],["999-43-7618"],["999-48-7529"],["999-49-1523"],["999-50-6701"],["999-55-8318"],["999-56-9439"],["999-58-6412"],["999-60-9688"],["999-65-4799"],["999-65-9406"],["999-69-3856"],["999-73-2691"],["999-79-8310"],["999-82-1438"],["999-83-4011"],["999-92-1074"],["999-94-1050"],["999-98-3240"],["999-98-4218"]],"headers":["SSN"],"rawHeaders":["SSN"]},"headerInfo":[{"alias":"SSN","header":"SSN","type":"STRING","derived":false}],"sortInfo":[],"numRows":31,"numCollected":2000,"taskOptions":{"panelId":"3","name":"cbv_1557433743057","type":"color"},"format":{"type":"TABLE"},"filterInfo":[],"taskId":"task9"},"operationType":["PANEL_ORNAMENT_DATA"]},{"pixelExpression":"Panel ( 3 ) | RetrievePanelColorByValue ( name = [ \"cbv_1557433856937\" ] ) | Collect ( 2000 ) ;","isMeta":false,"output":{"data":{"values":[],"headers":["SSN"],"rawHeaders":null},"format":{"type":"TABLE"},"headerInfo":[{"alias":"SSN","header":"SSN","type":"STRING","derived":false}],"sortInfo":[],"numCollected":2000,"taskOptions":{"panelId":"3","name":"cbv_1557433856937","type":"color"},"filterInfo":[],"taskId":"task11"},"operationType":["PANEL_ORNAMENT_DATA"]}]}